<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on ClojureScript Quick Reference </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 01 Jan 2008 00:00:00 UTC</updated>
    
    <item>
      <title>Control Flow</title>
      <link>http://localhost:1313/control-flow/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/control-flow/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;ClojureScript Control Flow&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;==, &amp;gt;, &amp;gt;=, &amp;lt;, and &amp;lt;=&lt;/h2&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 == 0; // false
1 &amp;gt; 0;  // true
1 &amp;gt;= 0; // true
1 &amp;lt; 0;  // false
1 &amp;lt;= 0; // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(= 1 0)  ; false
(&amp;gt; 1 0)  ; true
(&amp;gt;= 1 0) ; true
(&amp;lt; 1 0)  ; false
(&amp;lt;= 1 0) ; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;if&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if( true ) {
  console.log(&amp;quot;i am true&amp;quot;);
} else {
  console.log(&amp;quot;i am false&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(if true 
  println(&amp;quot;i am true&amp;quot;) 
  println(&amp;quot;i am false&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;if/else-if/else&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if( 2 &amp;gt; 3 ) {
  console.log(&amp;quot;nope&amp;quot;);
} else if (3 &amp;gt; 5) {
  console.log(&amp;quot;no&amp;quot;);
} else {
  console.log(&amp;quot;yep&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(cond (&amp;gt; 2 3) (println &amp;quot;nope&amp;quot;)
      (&amp;gt; 3 5) (println &amp;quot;no&amp;quot;)
      :else   (println &amp;quot;yep&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For if/else if/else statements, ClojureScript introduces a new function, cond.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://localhost:1313/javascript/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/javascript/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Working With JavaScript&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Accessing vars&lt;/h2&gt;

&lt;p&gt;Given:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var name = &amp;quot;Matt&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  console.log(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (println js/name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Accessing object attributes&lt;/h2&gt;

&lt;p&gt;Given:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var person = {name: &amp;quot;Matt&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  console.log(person.name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (println (.-name js/person))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript object attributes are accessed via the .-{property} macro&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Invoking methods&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  document.getElementById(&amp;quot;app&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (.getElementById js/document &amp;quot;app&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Invoking chained methods&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  document.getElementById(&amp;quot;app&amp;quot;).append(element);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (.append (.getElementById js/document &amp;quot;app&amp;quot;) element)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reagent</title>
      <link>http://localhost:1313/reagent/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/reagent/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Reagent&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Creating a component&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn salutations []
  [:div.content
    [:p#name &amp;quot;hello world&amp;quot;]
  ])
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;p id=&amp;quot;name&amp;quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Composing Components&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn greetings [name]
  [:div.content
    [:p#name &amp;quot;Hello &amp;quot; name]
  ])
  
(defn composed-component []
  [:div.parent
    [greetings &amp;quot;Matt&amp;quot;]
  ])
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;composed-component&lt;/code&gt; renders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
    &amp;lt;p id=&amp;quot;name&amp;quot;&amp;gt;Hello Matt&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Iterating Through Arrays&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn week-day [day]
  [:th day])

(defn week-days []
  (let [days [&amp;quot;Sun&amp;quot; &amp;quot;Mon&amp;quot; &amp;quot;Tue&amp;quot; &amp;quot;Wed&amp;quot; &amp;quot;Thu&amp;quot; &amp;quot;Fri&amp;quot; &amp;quot;Sat&amp;quot;]
    [:tr
      (for [day days]
        [week-day day])
    ]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;Sun&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Mon&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Tue&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Wed&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Thu&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Fri&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Sat&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>http://localhost:1313/data-types/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/data-types/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;ClojureScript Data Types&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Arrays (Vectors)&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var values = [1, 2, 3, 4];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def values [1 2 3 4])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Maps&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var params = {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;, &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params { &amp;quot;hello&amp;quot; &amp;quot;world&amp;quot; 
                &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript allows you to put commas where you would expect, but it&amp;rsquo;s completely
optional and generally not used.  For clarity, it&amp;rsquo;s best to put key/value pairs on their
own line.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Sets&lt;/h2&gt;

&lt;p&gt;A set is a collection with only unique elements.  JavaScript has no corresponding structure.&lt;/p&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params #{ &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot;}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Accessing Arrays (Vectors)&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var values = [1, 2, 3, 4];
  console.log(values[0]);  // prints 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def values [1 2 3 4])
  (println (values 0)) ; prints 1
  (println (values 100)) ; prints nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Accessing Maps&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var params = {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;, &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;};
  console.log(params[&amp;quot;hello&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params { &amp;quot;hello&amp;quot; &amp;quot;world&amp;quot; 
                &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; })
  (println (params &amp;quot;hello&amp;quot;)) ; prints hello                
  (println (params &amp;quot;does-not-exist&amp;quot;)) ; prints nil                
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript allows you to put commas where you would expect, but it&amp;rsquo;s completely
optional and generally not used.  For clarity, it&amp;rsquo;s best to put key/value pairs on their
own line.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Accessing Nested Maps&lt;/h2&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var params = {
    &amp;quot;us&amp;quot;: {&amp;quot;currency&amp;quot;: &amp;quot;usd&amp;quot;},
    &amp;quot;jp&amp;quot;: {&amp;quot;currency&amp;quot;: &amp;quot;yen&amp;quot;}
  }
     
  console.log(params[&amp;quot;us&amp;quot;][&amp;quot;currency&amp;quot;]); // prints usd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params {
    &amp;quot;us&amp;quot; {&amp;quot;currency&amp;quot; &amp;quot;usd&amp;quot;}
    &amp;quot;jp&amp;quot; {&amp;quot;currency&amp;quot; &amp;quot;yen&amp;quot;}
  })

  (println (get-in params [&amp;quot;us&amp;quot; &amp;quot;currency&amp;quot;])) ; prints usd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get-in accepts a vector that allows you to traverse arbitrarily deep nested maps.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Accessing Nested Maps/Arrays&lt;/h2&gt;

&lt;p&gt;Illustrates accessing complex objects that contain both maps and arrays.&lt;/p&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var params = {
    &amp;quot;us&amp;quot;: {&amp;quot;timezones&amp;quot;: [&amp;quot;EST&amp;quot;, &amp;quot;CST&amp;quot;, &amp;quot;MST&amp;quot;, &amp;quot;PST&amp;quot;, &amp;quot;HST&amp;quot;, &amp;quot;AKST&amp;quot;]},
    &amp;quot;jp&amp;quot;: {&amp;quot;timezones&amp;quot;: [&amp;quot;JST&amp;quot;]}
  }
     
  console.log(params[&amp;quot;us&amp;quot;][&amp;quot;timezones&amp;quot;][2]]); // prints MST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params {
    &amp;quot;us&amp;quot; {&amp;quot;timezones&amp;quot; [&amp;quot;EST&amp;quot; &amp;quot;CST&amp;quot; &amp;quot;MST&amp;quot; &amp;quot;PST&amp;quot; &amp;quot;HST&amp;quot; &amp;quot;AKST&amp;quot;]}
    &amp;quot;jp&amp;quot; {&amp;quot;timezones&amp;quot; [&amp;quot;JST&amp;quot;]}
  })

  (println (get-in params [&amp;quot;us&amp;quot; &amp;quot;timezones&amp;quot; 2])) ; prints MST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get-in accepts a vector that allows you to traverse arbitrarily deep nested maps.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Accessing Sets&lt;/h2&gt;

&lt;p&gt;ClojureScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (def params #{ &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;})
  (println (params &amp;quot;a&amp;quot;)) ; prints a
  (println (params &amp;quot;d&amp;quot;)) ; prints nil
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>